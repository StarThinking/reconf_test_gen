diff -ruN /hadoop-2.8.5-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java
--- /hadoop-2.8.5-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java	1970-01-01 00:00:00.000000000 +0000
+++ ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java	2020-04-28 01:44:54.771715438 +0000
@@ -0,0 +1,167 @@
+package org.apache.hadoop.conf;
+
+import java.io.*;
+import java.util.List;
+import java.util.ArrayList;
+import org.apache.hadoop.conf.Configuration;
+
+public class ReconfAgent {
+
+    private static final int RP_MODE_INSTANCE = -1; // set v2 to a single instance of the specified component throughout a test
+    private static final int RP_MODE_COMPONENT = -2; // set v2 to all instances for the specified component
+    //private static final String RP_MODE_RECONF = "1"; // set v2 to a single life cycle of a single instance of the specified component
+    private static final String reconf_systemRootDir = "/root/parameter_test_controller/";
+
+    private static String reconf_vvmode = "";
+    private static String reconf_parameter = "";
+    private static String reconf_component = "";
+    private static String reconf_v1 = "";
+    private static String reconf_v2 = "";
+    private static String reconf_point = "";
+    private static int reconf_point_int = 0; 
+    
+    private static int reconf_init_point_index = 0;
+    private static List<Integer> confInstanceList = new ArrayList<Integer>();
+
+    // load just once
+    static {
+	loadSharedVariables();
+    }
+
+    private static void loadSharedVariables() {
+        try {
+            BufferedReader reader;
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_vvmode")));
+            reconf_vvmode = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_parameter")));
+            reconf_parameter = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_component")));
+            reconf_component = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_v1")));
+            reconf_v1 = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_v2")));
+            reconf_v2 = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_point")));
+            reconf_point = reader.readLine();
+            reader.close();
+            reconf_point_int = Integer.valueOf(reconf_point);
+
+            if (!reconf_vvmode.equals("v1v1") && !reconf_vvmode.equals("v2v2") && !reconf_vvmode.equals("v1v2") && !reconf_vvmode.equals("none")) {
+                myPrint("ERROR : wrong value of reconf_vvmode " + reconf_vvmode);
+                System.exit(1);
+            }
+      
+	    myPrint("reconf_vvmode=" + reconf_vvmode + ", reconf_parameter=" + reconf_parameter + 
+			    ", reconf_component=" + reconf_component + ", reconf_v1=" + reconf_v1 + ", reconf_v2=" + reconf_v2 +
+			    ", reconf_point=" + reconf_point);
+        } catch (Exception e) {
+            myPrint("ERROR : loadSharedVariables");
+            e.printStackTrace();
+        }
+    }
+
+    public ReconfAgent(String callerClassName) {
+ 	myPrint("creating ReconfAgent " + this.hashCode() + " for " + callerClassName);
+    }
+
+    public void checkReconfAtShutdown(Object obj, String component, Configuration myConf) {
+        myPrint("" + component + " stop " + obj.hashCode() + ", value is " + myConf.get(reconf_parameter));
+	Integer confToRemove = new Integer(myConf.hashCode());
+	boolean existed = confInstanceList.remove(confToRemove);
+	if (!existed) {
+	    myPrint("ERROR : conf " + confToRemove + " not existed in confInstanceList when removing.");
+	}
+    }
+
+    public void performReconf(Object obj, String component, Configuration myConf) {
+      Integer confToAdd = new Integer(myConf.hashCode());
+      if (!confInstanceList.contains(confToAdd)) {
+	  confInstanceList.add(confToAdd);
+      } else {
+	  myPrint("ERROR : conf " + confToAdd + " existed in confInstanceList when adding.");
+      }
+
+      if (reconf_vvmode.equals("none")) {
+          myPrint(component + " init, vvmode is none, do nothing");
+      }
+
+      if (reconf_vvmode.equals("v1v1")) {
+          myConf.set(reconf_parameter, reconf_v1);
+          myPrint(component + " init " + obj.hashCode() + ", vvmode is " + reconf_vvmode + 
+			  ". Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode());
+      }
+
+      if ((reconf_vvmode.equals("v2v2"))) {
+          myConf.set(reconf_parameter, reconf_v2);
+          myPrint(component + " init " + obj.hashCode() + ", vvmode is " + reconf_vvmode + 
+			  ". Set value as v2 " + reconf_v2);//  + " myConf is " + myConf.hashCode());
+      }
+
+      if (reconf_vvmode.equals("v1v2")) { // reconfiguration injection
+          try {
+              synchronized(this) {
+                  if (reconf_component.equals(component)) {
+                      if (reconf_point_int == RP_MODE_INSTANCE) {
+                          /*if (reconf_instanceWithV2Alive == false) {
+                                reconf_instanceWithV2Alive = true;
+                                reconf_instanceWithV2HC = this.hashCode();
+                                myConf.set(reconf_parameter, reconf_v2);
+                                myPrint("" + component + " init, perform Instance-Wide v1v2 reconf " + reconf_point +  " for " + component + ". " +
+                                    "Assign " + reconf_parameter + " as v2 value " + reconf_v2);
+                                myPrint("switch instanceWithV2Alive to true and record instanceWithV2HC as " + reconf_instanceWithV2HC);
+                            } else { // the instance configured with v2 is still alive
+                                myConf.set(reconf_parameter, reconf_v1);
+                                myPrint("" + component + " init, the instance configured with v2 is still alive. " +
+                                    "Assign " + reconf_parameter + " as v1 value " + reconf_v1);
+                            }*/
+                      } else {
+                          reconf_init_point_index ++;
+                          if (reconf_point_int == reconf_init_point_index) {
+                              myConf.set(reconf_parameter, reconf_v2);
+                              myPrint(component + " init " + obj.hashCode() + ", PERFORM V1V2 RECONF " + reconf_point +
+					      ". Set value as v2 " + reconf_v2);// + " myConf is " + myConf.hashCode());
+                          } else {
+                              myConf.set(reconf_parameter, reconf_v1);
+                              myPrint(component + " init " + obj.hashCode() + ", irrelevant init point " + reconf_init_point_index  +
+					      " not " + reconf_point +
+					      ". Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode());
+                          }
+                      }
+                  } else { // for other component instances, just configure it to be v1
+                      myConf.set(reconf_parameter, reconf_v1);
+                      myPrint(component + " init " + obj.hashCode() + ", irrelevant component." +
+				      " Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode()); 
+                  }
+              }
+          } catch (Exception e) {
+              myPrint("ERROR happened during performReconf");
+              System.exit(1);
+          }
+      }
+    }
+
+    private static void myPrint(String str) { System.out.println("msx-reconfagent " + str);}
+    
+    /*public ReconfAgent() {
+	String callerClassName = new Exception().getStackTrace()[1].getClassName();
+ 	myPrint("creating ReconfAgent " + this.hashCode() + " for " + callerClassName);
+    }*/
+    
+    /*public void checkReconfAtShutdown(Object obj, Configuration myConf) {
+	this.checkReconfAtShutdown(obj, obj.getClass().getSimpleName(), myConf);
+    }*/
+
+    /*public void performReconf(Object obj, Configuration myConf) {
+	this.performReconf(obj, obj.getClass().getSimpleName(), myConf);
+    }*/
+}
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2020-04-28 01:54:45.021920364 +0000
@@ -56,6 +56,9 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**
  * The JournalNode is a daemon which allows namenodes using
  * the QuorumJournalManager to log and retrieve edits stored
@@ -104,8 +107,14 @@
     return getOrCreateJournal(jid, StartupOption.REGULAR);
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("JournalNode");
+
   @Override
   public void setConf(Configuration conf) {
+    // msx
+    reconfAgent.performReconf(this, "JournalNode", conf);
+
     this.conf = conf;
     this.localDir = new File(
         conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,
@@ -191,6 +200,9 @@
    * should indicate an error)
    */
   public void stop(int rc) {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "JournalNode", this.conf);
+
     this.resultCode = rc;
     
     if (rpcServer != null) { 
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2020-04-28 01:48:32.206001187 +0000
@@ -222,6 +222,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * DataNode is a class (and program) that stores a set of
  * blocks for a DFS deployment.  A single deployment can
@@ -394,6 +397,9 @@
 
   private ScheduledThreadPoolExecutor metricsLoggerTimer;
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("DataNode");
+
   /**
    * Creates a dummy DataNode for testing purpose.
    */
@@ -401,6 +407,10 @@
   @InterfaceAudience.LimitedPrivate("HDFS")
   DataNode(final Configuration conf) {
     super(conf);
+
+    // msx
+    reconfAgent.performReconf(this, "DataNode", conf);
+
     this.blockScanner = new BlockScanner(this, conf);
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
@@ -425,6 +435,10 @@
            final List<StorageLocation> dataDirs,
            final SecureResources resources) throws IOException {
     super(conf);
+
+    // msx
+    reconfAgent.performReconf(this, "DataNode", conf);
+    
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
         new TracerConfigurationManager(DATANODE_HTRACE_PREFIX, conf);
@@ -1852,6 +1866,9 @@
    * Otherwise, deadlock might occur.
    */
   public void shutdown() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "DataNode", this.getConf());
+
     stopMetricsLogger();
     if (plugins != null) {
       for (ServicePlugin p : plugins) {
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2020-04-28 02:00:53.857797702 +0000
@@ -147,6 +147,9 @@
 import static org.apache.hadoop.util.ExitUtil.terminate;
 import static org.apache.hadoop.util.ToolRunner.confirmPrompt;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * NameNode serves as both directory namespace manager and
  * "inode table" for the Hadoop DFS.  There is a single NameNode
@@ -885,8 +888,14 @@
     this(conf, NamenodeRole.NAMENODE);
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("NameNode");
+
   protected NameNode(Configuration conf, NamenodeRole role)
       throws IOException {
+    // msx
+    reconfAgent.performReconf(this, "NameNode", conf);
+
     this.tracer = new Tracer.Builder("NameNode").
         conf(TraceUtils.wrapHadoopConf(NAMENODE_HTRACE_PREFIX, conf)).
         build();
@@ -959,6 +968,9 @@
    * Stop all NameNode threads and wait for all to finish.
    */
   public void stop() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "NameNode", this.conf);
+
     synchronized(this) {
       if (stopRequested)
         return;
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2020-04-28 01:51:59.896184502 +0000
@@ -83,6 +83,9 @@
 
 import javax.management.ObjectName;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * The Secondary NameNode is a helper to the primary NameNode.
  * The Secondary is responsible for supporting periodic checkpoints 
@@ -180,9 +183,15 @@
   public SecondaryNameNode(Configuration conf)  throws IOException {
     this(conf, new CommandLineOpts());
   }
+
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("SecondaryNameNode");
   
   public SecondaryNameNode(Configuration conf,
       CommandLineOpts commandLineOpts) throws IOException {
+    // msx 
+    reconfAgent.performReconf(this, "SecondaryNameNode", conf);
+
     try {
       String nsId = DFSUtil.getSecondaryNameServiceId(conf);
       if (HAUtil.isHAEnabled(conf, nsId)) {
@@ -280,6 +289,9 @@
    * Returns only after shutdown is complete.
    */
   public void shutdown() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "SecondaryNameNode", this.conf);
+
     shouldRun = false;
     if (checkpointThread != null) {
       checkpointThread.interrupt();
