diff -ruN /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java
--- /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java	1970-01-01 00:00:00.000000000 +0000
+++ ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java	2020-04-27 03:44:57.859168598 +0000
@@ -0,0 +1,167 @@
+package org.apache.hadoop.conf;
+
+import java.io.*;
+import java.util.List;
+import java.util.ArrayList;
+import org.apache.hadoop.conf.Configuration;
+
+public class ReconfAgent {
+
+    private static final int RP_MODE_INSTANCE = -1; // set v2 to a single instance of the specified component throughout a test
+    private static final int RP_MODE_COMPONENT = -2; // set v2 to all instances for the specified component
+    //private static final String RP_MODE_RECONF = "1"; // set v2 to a single life cycle of a single instance of the specified component
+    private static final String reconf_systemRootDir = "/root/parameter_test_controller/";
+
+    private static String reconf_vvmode = "";
+    private static String reconf_parameter = "";
+    private static String reconf_component = "";
+    private static String reconf_v1 = "";
+    private static String reconf_v2 = "";
+    private static String reconf_point = "";
+    private static int reconf_point_int = 0; 
+    
+    private static int reconf_init_point_index = 0;
+    private static List<Integer> confInstanceList = new ArrayList<Integer>();
+
+    // load just once
+    static {
+	loadSharedVariables();
+    }
+
+    private static void loadSharedVariables() {
+        try {
+            BufferedReader reader;
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_vvmode")));
+            reconf_vvmode = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_parameter")));
+            reconf_parameter = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_component")));
+            reconf_component = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_v1")));
+            reconf_v1 = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_v2")));
+            reconf_v2 = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_point")));
+            reconf_point = reader.readLine();
+            reader.close();
+            reconf_point_int = Integer.valueOf(reconf_point);
+
+            if (!reconf_vvmode.equals("v1v1") && !reconf_vvmode.equals("v2v2") && !reconf_vvmode.equals("v1v2") && !reconf_vvmode.equals("none")) {
+                myPrint("ERROR : wrong value of reconf_vvmode " + reconf_vvmode);
+                System.exit(1);
+            }
+      
+	    myPrint("reconf_vvmode=" + reconf_vvmode + ", reconf_parameter=" + reconf_parameter + 
+			    ", reconf_component=" + reconf_component + ", reconf_v1=" + reconf_v1 + ", reconf_v2=" + reconf_v2 +
+			    ", reconf_point=" + reconf_point);
+        } catch (Exception e) {
+            myPrint("ERROR : loadSharedVariables");
+            e.printStackTrace();
+        }
+    }
+
+    public ReconfAgent(String callerClassName) {
+ 	myPrint("creating ReconfAgent " + this.hashCode() + " for " + callerClassName);
+    }
+
+    public void checkReconfAtShutdown(Object obj, String component, Configuration myConf) {
+        myPrint("" + component + " stop " + obj.hashCode() + ", value is " + myConf.get(reconf_parameter));
+	Integer confToRemove = new Integer(myConf.hashCode());
+	boolean existed = confInstanceList.remove(confToRemove);
+	if (!existed) {
+	    myPrint("ERROR : conf " + confToRemove + " not existed in confInstanceList when removing.");
+	}
+    }
+
+    public void performReconf(Object obj, String component, Configuration myConf) {
+      Integer confToAdd = new Integer(myConf.hashCode());
+      if (!confInstanceList.contains(confToAdd)) {
+	  confInstanceList.add(confToAdd);
+      } else {
+	  myPrint("ERROR : conf " + confToAdd + " existed in confInstanceList when adding.");
+      }
+
+      if (reconf_vvmode.equals("none")) {
+          myPrint(component + " init, vvmode is none, do nothing");
+      }
+
+      if (reconf_vvmode.equals("v1v1")) {
+          myConf.set(reconf_parameter, reconf_v1);
+          myPrint(component + " init " + obj.hashCode() + ", vvmode is " + reconf_vvmode + 
+			  ". Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode());
+      }
+
+      if ((reconf_vvmode.equals("v2v2"))) {
+          myConf.set(reconf_parameter, reconf_v2);
+          myPrint(component + " init " + obj.hashCode() + ", vvmode is " + reconf_vvmode + 
+			  ". Set value as v2 " + reconf_v2);//  + " myConf is " + myConf.hashCode());
+      }
+
+      if (reconf_vvmode.equals("v1v2")) { // reconfiguration injection
+          try {
+              synchronized(this) {
+                  if (reconf_component.equals(component)) {
+                      if (reconf_point_int == RP_MODE_INSTANCE) {
+                          /*if (reconf_instanceWithV2Alive == false) {
+                                reconf_instanceWithV2Alive = true;
+                                reconf_instanceWithV2HC = this.hashCode();
+                                myConf.set(reconf_parameter, reconf_v2);
+                                myPrint("" + component + " init, perform Instance-Wide v1v2 reconf " + reconf_point +  " for " + component + ". " +
+                                    "Assign " + reconf_parameter + " as v2 value " + reconf_v2);
+                                myPrint("switch instanceWithV2Alive to true and record instanceWithV2HC as " + reconf_instanceWithV2HC);
+                            } else { // the instance configured with v2 is still alive
+                                myConf.set(reconf_parameter, reconf_v1);
+                                myPrint("" + component + " init, the instance configured with v2 is still alive. " +
+                                    "Assign " + reconf_parameter + " as v1 value " + reconf_v1);
+                            }*/
+                      } else {
+                          reconf_init_point_index ++;
+                          if (reconf_point_int == reconf_init_point_index) {
+                              myConf.set(reconf_parameter, reconf_v2);
+                              myPrint(component + " init " + obj.hashCode() + ", PERFORM V1V2 RECONF " + reconf_point +
+					      ". Set value as v2 " + reconf_v2);// + " myConf is " + myConf.hashCode());
+                          } else {
+                              myConf.set(reconf_parameter, reconf_v1);
+                              myPrint(component + " init " + obj.hashCode() + ", irrelevant init point " + reconf_init_point_index  +
+					      " not " + reconf_point +
+					      ". Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode());
+                          }
+                      }
+                  } else { // for other component instances, just configure it to be v1
+                      myConf.set(reconf_parameter, reconf_v1);
+                      myPrint(component + " init " + obj.hashCode() + ", irrelevant component." +
+				      " Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode()); 
+                  }
+              }
+          } catch (Exception e) {
+              myPrint("ERROR happened during performReconf");
+              System.exit(1);
+          }
+      }
+    }
+
+    private static void myPrint(String str) { System.out.println("msx-reconfagent " + str);}
+    
+    /*public ReconfAgent() {
+	String callerClassName = new Exception().getStackTrace()[1].getClassName();
+ 	myPrint("creating ReconfAgent " + this.hashCode() + " for " + callerClassName);
+    }*/
+    
+    /*public void checkReconfAtShutdown(Object obj, Configuration myConf) {
+	this.checkReconfAtShutdown(obj, obj.getClass().getSimpleName(), myConf);
+    }*/
+
+    /*public void performReconf(Object obj, Configuration myConf) {
+	this.performReconf(obj, obj.getClass().getSimpleName(), myConf);
+    }*/
+}
diff -ruN /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java
--- /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java	2020-04-23 16:19:00.361700995 +0000
@@ -149,7 +149,7 @@
    * the state change not permitted, or something else went wrong
    */
   @Override
-  public void init(Configuration conf) {
+  public void init(Configuration conf) { 
     if (conf == null) {
       throw new ServiceStateException("Cannot initialize service "
                                       + getName() + ": null configuration");
diff -ruN /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TimedOutTestsListener.java ./hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TimedOutTestsListener.java
--- /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TimedOutTestsListener.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TimedOutTestsListener.java	2020-04-23 16:19:00.361700995 +0000
@@ -33,6 +33,13 @@
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
 
+import org.junit.runner.Description;
+import org.junit.runner.Result;
+import java.io.File;
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+import org.apache.commons.lang3.exception.ExceptionUtils;
+
 /**
  * JUnit run listener which prints full thread dump into System.err
  * in case a test is failed due to timeout.
@@ -45,6 +52,13 @@
 
   private final PrintWriter output;
   
+  public String controllerRootDir = "/root/parameter_test_controller/";
+  public String resultDirName = controllerRootDir + "shared/test_results/";
+  public String warnDirName = controllerRootDir + "shared/warn_results/";
+  public String SEPERATOR = "@@@";
+  public String globalTestName = "";
+  public int unitTestCounterInClass = 0;
+
   public TimedOutTestsListener() {
     this.output = new PrintWriter(System.err);
   }
@@ -53,8 +67,120 @@
     this.output = output;
   }
 
+  private void writeFile(String testName, String failureMessage, String stackTrace, String result) throws Exception {
+      System.out.println("msx-listener writeFile testName is " + testName);
+      File theFile = null;
+      if (testName.equals("")) {
+          Date date = new Date();
+          SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
+          String dateTime = "Warn-" + formatter.format(date);
+          theFile = new File(warnDirName + dateTime);
+      } else {
+          theFile = new File(resultDirName + testName);
+      }
+
+      if (!theFile.exists()) {
+          BufferedWriter writer = new BufferedWriter(new FileWriter(theFile)); 
+          writer.write(testName + SEPERATOR + result + SEPERATOR + failureMessage + SEPERATOR + stackTrace + SEPERATOR);
+          writer.flush();
+          writer.close();
+      } else {
+          System.out.println("msx-listener INFO: file existed " + theFile);
+      }
+  }
+
+  private String getTestName(String className, String methodName) throws Exception {
+      if (className == null || methodName == null || className.equals("") || methodName.equals("")) {
+          if (!globalTestName.equals("") && !globalTestName.equals("#")) {
+              System.out.println("msx-listener WARN: using globalTestName " + globalTestName);
+              return globalTestName;
+          } else {
+              System.out.println("msx-listener ERROR: unable to obtain test name!");
+              return "";
+          } 
+      }
+      return className + "#" + methodName;
+  }
+
+  private void succeed(String testName, Description description) throws Exception {
+      String failureMessage = "none";
+      String stackTrace = "none";
+      String result = "1";
+      writeFile(testName, failureMessage, stackTrace, result);
+      System.out.println("msx-listener succeed");
+      //reset();
+  }
+
+  private void failed(String testName, Failure failure) throws Exception {
+      String failureMessage = failure.getMessage();
+      String stackTrace = ExceptionUtils.getStackTrace(failure.getException());
+      String result = "-1";
+      writeFile(testName, failureMessage, stackTrace, result);
+      System.out.println("msx-listener failed");
+      System.out.println("msx-listener failureMessage: " + failureMessage);
+      System.out.println("msx-listener stackTrace: " + stackTrace);
+      //reset();
+  }
+
+  @Override
+  public void testStarted(Description description) throws java.lang.Exception {
+      globalTestName = description.getClassName() + "#" + description.getMethodName();
+      System.out.println("msx-listener test started " + globalTestName);
+      if (unitTestCounterInClass > 0) { // perform reset
+          System.out.println("msx-listener perform reset as unitTestCounterInClass " + unitTestCounterInClass + " is larger than zero");
+          //reset();
+      } else {
+          System.out.println("msx-listener unitTestCounterInClass = " + unitTestCounterInClass);
+      }
+      unitTestCounterInClass++;
+  }
+
+  @Override
+  public void testFinished(Description description) throws Exception {
+      String testName = getTestName(description.getClassName(), description.getMethodName());
+      System.out.println("msx-listener testfinished " + testName);
+      succeed(testName, description);
+  }
+  
+  @Override
+  public void testIgnored(Description description) throws Exception {
+      String testName = getTestName(description.getClassName(), description.getMethodName());
+      System.out.println("msx-listener test Ignored " + testName);
+      succeed(testName, description);
+  }
+   
+  public void myTestFailure(Failure failure) throws Exception{
+      Description description = failure.getDescription();
+      String testName = getTestName(description.getClassName(), description.getMethodName());
+      System.out.println("msx-listener test Failure " + testName);
+      failed(testName, failure);
+  }
+
+  @Override
+  public void testAssumptionFailure(Failure failure) {
+      try {
+          Description description = failure.getDescription();
+          String testName = getTestName(description.getClassName(), description.getMethodName());
+          System.out.println("msx-listener testAssumptionFailure " + testName);
+          failed(testName, failure);
+      } catch(Exception e) {
+          e.printStackTrace();
+      }
+  }
+   
+  @Override // Called before any tests have been run.
+  public void testRunStarted(Description description) throws Exception {
+      System.out.println("msx-listener all testRunStarted");
+  }
+
+  @Override // Called when all tests have finished
+  public void testRunFinished(Result result) throws Exception {
+      System.out.println("msx-listener all testRunFinished");
+  }
+
   @Override
   public void testFailure(Failure failure) throws Exception {
+    myTestFailure(failure);
     if (failure != null && failure.getMessage() != null 
         && failure.getMessage().startsWith(TEST_TIMED_OUT_PREFIX)) {
       output.println("====> TEST TIMED OUT. PRINTING THREAD DUMP. <====");
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2020-04-27 03:43:45.234405140 +0000
@@ -59,6 +59,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**
  * The JournalNode is a daemon which allows namenodes using
  * the QuorumJournalManager to log and retrieve edits stored
@@ -147,8 +150,14 @@
     return getOrCreateJournal(jid, nameServiceId, StartupOption.REGULAR);
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("JournalNode");
+
   @Override
   public void setConf(Configuration conf) {
+    // msx
+    reconfAgent.performReconf(this, "JournalNode", conf);
+    
     this.conf = conf;
 
     String journalNodeDir = null;
@@ -266,6 +275,9 @@
    * should indicate an error)
    */
   public void stop(int rc) {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "JournalNode", this.conf);
+
     this.resultCode = rc;
 
     for (JournalNodeSyncer jSyncer : journalSyncersById.values()) {
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2020-04-27 03:41:47.461167064 +0000
@@ -228,6 +228,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * DataNode is a class (and program) that stores a set of
  * blocks for a DFS deployment.  A single deployment can
@@ -412,6 +415,9 @@
 
   private ScheduledThreadPoolExecutor metricsLoggerTimer;
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("DataNode");
+
   /**
    * Creates a dummy DataNode for testing purpose.
    */
@@ -419,6 +425,10 @@
   @InterfaceAudience.LimitedPrivate("HDFS")
   DataNode(final Configuration conf) throws DiskErrorException {
     super(conf);
+
+    // msx
+    reconfAgent.performReconf(this, "DataNode", conf);
+
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
         new TracerConfigurationManager(DATANODE_HTRACE_PREFIX, conf);
@@ -446,6 +456,10 @@
            final StorageLocationChecker storageLocationChecker,
            final SecureResources resources) throws IOException {
     super(conf);
+
+    // msx
+    reconfAgent.performReconf(this, "DataNode", conf);
+    
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
         new TracerConfigurationManager(DATANODE_HTRACE_PREFIX, conf);
@@ -2005,6 +2019,9 @@
    * Otherwise, deadlock might occur.
    */
   public void shutdown() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "DataNode", this.getConf());
+
     stopMetricsLogger();
     if (plugins != null) {
       for (ServicePlugin p : plugins) {
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2020-04-27 03:42:21.981529955 +0000
@@ -177,6 +177,9 @@
 import static org.apache.hadoop.fs.CommonConfigurationKeys.IPC_NAMESPACE;
 import static org.apache.hadoop.fs.CommonConfigurationKeys.IPC_BACKOFF_ENABLE_DEFAULT;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * NameNode serves as both directory namespace manager and
  * "inode table" for the Hadoop DFS.  There is a single NameNode
@@ -926,9 +929,16 @@
     this(conf, NamenodeRole.NAMENODE);
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("NameNode");
+
   protected NameNode(Configuration conf, NamenodeRole role)
       throws IOException {
     super(conf);
+
+    // msx
+    reconfAgent.performReconf(this, "NameNode", conf);
+    
     this.tracer = new Tracer.Builder("NameNode").
         conf(TraceUtils.wrapHadoopConf(NAMENODE_HTRACE_PREFIX, conf)).
         build();
@@ -965,6 +975,7 @@
       this.stopAtException(e);
       throw e;
     }
+
     this.started.set(true);
   }
 
@@ -1008,6 +1019,9 @@
    * Stop all NameNode threads and wait for all to finish.
    */
   public void stop() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "NameNode", this.getConf());
+    
     synchronized(this) {
       if (stopRequested)
         return;
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2020-04-27 03:43:08.874022905 +0000
@@ -83,6 +83,9 @@
 
 import javax.management.ObjectName;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * The Secondary NameNode is a helper to the primary NameNode.
  * The Secondary is responsible for supporting periodic checkpoints 
@@ -180,9 +183,15 @@
   public SecondaryNameNode(Configuration conf)  throws IOException {
     this(conf, new CommandLineOpts());
   }
+
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("SecondaryNameNode");
   
   public SecondaryNameNode(Configuration conf,
       CommandLineOpts commandLineOpts) throws IOException {
+    // msx 
+    reconfAgent.performReconf(this, "SecondaryNameNode", conf);
+    
     try {
       String nsId = DFSUtil.getSecondaryNameServiceId(conf);
       if (HAUtil.isHAEnabled(conf, nsId)) {
@@ -280,6 +289,9 @@
    * Returns only after shutdown is complete.
    */
   public void shutdown() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "SecondaryNameNode", this.conf);
+    
     shouldRun = false;
     if (checkpointThread != null) {
       checkpointThread.interrupt();
diff -ruN /hadoop-3.2.1-src/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java ./hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java
--- /hadoop-3.2.1-src/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java	2019-09-10 14:35:50.000000000 +0000
+++ ./hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java	2020-04-27 04:24:48.580300730 +0000
@@ -54,6 +54,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**
  * Configures and starts the MR-specific components in the YARN cluster.
  *
@@ -227,12 +230,24 @@
             MRWebAppUtil.getJHSHttpPolicy() == HttpConfig.Policy.HTTPS_ONLY));
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("JobHistoryServer");
+  
   private class JobHistoryServerWrapper extends AbstractService {
     public JobHistoryServerWrapper() {
       super(JobHistoryServerWrapper.class.getName());
     }
     private volatile boolean jhsStarted = false;
 
+    // msx
+    @Override
+    public synchronized void serviceInit(Configuration conf) throws Exception {
+	Configuration config = new YarnConfiguration(conf);
+	// msx
+	reconfAgent.performReconf(this, "JobHistoryServer", config);
+	super.serviceInit(config);
+    }
+
     @Override
     public synchronized void serviceStart() throws Exception {
       try {
@@ -270,6 +285,9 @@
 
     @Override
     public synchronized void serviceStop() throws Exception {
+      // msx
+      reconfAgent.checkReconfAtShutdown(this, "JobHistoryServer", this.getConfig());
+
       if (historyServer != null) {
         historyServer.stop();
       }
diff -ruN /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java
--- /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java	2019-09-10 14:35:50.000000000 +0000
+++ ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java	2020-04-27 03:37:18.302337569 +0000
@@ -60,6 +60,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**
  * History server that keeps track of all types of history in the cluster.
  * Application specific history to start with.
@@ -82,9 +85,14 @@
   public ApplicationHistoryServer() {
     super(ApplicationHistoryServer.class.getName());
   }
+  
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("ApplicationHistoryServer");
 
   @Override
   protected void serviceInit(Configuration conf) throws Exception {
+    // msx
+    reconfAgent.performReconf(this, "ApplicationHistoryServer", conf);
 
     // do security login first.
     try {
@@ -123,6 +131,9 @@
 
   @Override
   protected void serviceStop() throws Exception {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "ApplicationHistoryServer", this.getConfig());
+    
     if (webApp != null) {
       webApp.stop();
     }
diff -ruN /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java
--- /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java	2019-09-10 14:35:50.000000000 +0000
+++ ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java	2020-04-27 05:37:23.430080500 +0000
@@ -92,6 +92,9 @@
 import java.util.concurrent.ConcurrentSkipListMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 public class NodeManager extends CompositeService
     implements EventHandler<NodeManagerEvent>, NodeManagerMXBean {
 
@@ -383,8 +386,14 @@
             DefaultContainerExecutor.class, ContainerExecutor.class), conf);
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("NodeManager");
+  
   @Override
-  protected void serviceInit(Configuration conf) throws Exception {
+  protected void serviceInit(Configuration conf) throws Exception { 
+    // msx
+    reconfAgent.performReconf(this, "NodeManager", conf);
+
     UserGroupInformation.setConfiguration(conf);
     rmWorkPreservingRestartEnabled = conf.getBoolean(YarnConfiguration
             .RM_WORK_PRESERVING_RECOVERY_ENABLED,
@@ -519,6 +528,9 @@
 
   @Override
   protected void serviceStop() throws Exception {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "NodeManager", this.getConfig());
+    
     if (isStopping.getAndSet(true)) {
       return;
     }
diff -ruN /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
--- /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java	2019-09-10 14:35:50.000000000 +0000
+++ ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java	2020-04-27 05:41:28.456656309 +0000
@@ -139,6 +139,9 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**
  * The ResourceManager is the main class that is a set of components.
  * "I am the ResourceManager. All your resources belong to us..."
@@ -249,9 +252,15 @@
     return resourceProfilesManager;
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("ResourceManager");
+  
   @Override
   protected void serviceInit(Configuration conf) throws Exception {
-    this.conf = conf;
+    // msx
+    reconfAgent.performReconf(this, "ResourceManager", conf);
+    
+    this.conf = conf; 
     UserGroupInformation.setConfiguration(conf);
     this.rmContext = new RMContextImpl();
     rmContext.setResourceManager(this);
@@ -346,7 +355,7 @@
 
     registerMXBean();
 
-    super.serviceInit(this.conf);
+    super.serviceInit(this.conf);  
   }
 
   private void loadConfigurationXml(String configurationFile)
@@ -897,7 +906,7 @@
 
     @Override
     protected void serviceStop() throws Exception {
-
+      
       super.serviceStop();
 
       DefaultMetricsSystem.shutdown();
@@ -1364,6 +1373,9 @@
 
   @Override
   protected void serviceStop() throws Exception {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "ResourceManager", this.conf);
+    
     if (webApp != null) {
       webApp.stop();
     }
diff -ruN /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/NodeManager.java ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/NodeManager.java
--- /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/NodeManager.java	2019-09-10 14:35:50.000000000 +0000
+++ ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/NodeManager.java	2020-04-25 23:54:25.437488811 +0000
@@ -97,6 +97,7 @@
       String rackName, Resource capability,
       ResourceManager resourceManager)
       throws IOException, YarnException {
+    System.out.println("msx-yarn NodeManager start Container");
     this.containerManagerAddress = hostName + ":" + containerManagerPort;
     this.nodeHttpAddress = hostName + ":" + httpPort;
     this.rackName = rackName;
diff -ruN /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java
--- /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java	2019-09-10 14:35:50.000000000 +0000
+++ ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java	2020-04-26 23:00:02.583456823 +0000
@@ -807,19 +807,22 @@
     @Override
     protected synchronized void serviceInit(Configuration conf)
         throws Exception {
+      // msx
+      Configuration config = new YarnConfiguration(conf);
       appHistoryServer = new ApplicationHistoryServer();
-      conf.setClass(YarnConfiguration.APPLICATION_HISTORY_STORE,
+      
+      config.setClass(YarnConfiguration.APPLICATION_HISTORY_STORE,
           MemoryApplicationHistoryStore.class, ApplicationHistoryStore.class);
       // Only set memory timeline store if timeline v1.5 is not enabled.
       // Otherwise, caller has the freedom to choose storage impl.
-      if (!TimelineUtils.timelineServiceV1_5Enabled(conf)) {
-        conf.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE,
+      if (!TimelineUtils.timelineServiceV1_5Enabled(config)) {
+        config.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE,
             MemoryTimelineStore.class, TimelineStore.class);
       }
-      conf.setClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS,
+      config.setClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS,
           MemoryTimelineStateStore.class, TimelineStateStore.class);
-      appHistoryServer.init(conf);
-      super.serviceInit(conf);
+      appHistoryServer.init(config);
+      super.serviceInit(config);
     }
 
     @Override
diff -ruN /hadoop-3.2.1-src/pom.xml ./pom.xml
--- /hadoop-3.2.1-src/pom.xml	2019-09-10 14:35:50.000000000 +0000
+++ ./pom.xml	2020-04-23 16:19:00.369701080 +0000
@@ -140,6 +140,21 @@
       <plugins>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-surefire-plugin</artifactId>
+          <configuration>
+            <properties>
+              <property>
+                <name>listener</name>
+                <value>org.apache.hadoop.test.TimedOutTestsListener</value>
+              </property>
+      	    </properties>
+            <additionalClasspathElements>
+              <additionalClasspathElement>/root/.m2/repository/org/apache/hadoop/hadoop-common/3.2.1/hadoop-common-3.2.1-tests.jar</additionalClasspathElement>
+            </additionalClasspathElements>
+          </configuration>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-dependency-plugin</artifactId>
           <version>${maven-dependency-plugin.version}</version>
         </plugin>
