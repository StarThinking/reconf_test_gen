diff -ruN /hadoop-2.8.5-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
--- /hadoop-2.8.5-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java	2018-09-09 08:35:07.000000000 +0000
+++ ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java	2020-05-18 03:42:20.334777534 +0000
@@ -104,6 +104,10 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 
+// msx
+import java.io.BufferedReader;
+import java.io.FileReader;
+
 /**
  * Provides access to configuration parameters.
  *
@@ -709,8 +713,11 @@
       handleDeprecation(deprecations, (String)item);
     }
   }
- 
-  static{
+  
+  //msx
+  private static boolean msxConfEnable = false;
+
+  static {
     //print deprecation warning if hadoop-site.xml is found in classpath
     ClassLoader cL = Thread.currentThread().getContextClassLoader();
     if (cL == null) {
@@ -725,6 +732,18 @@
     }
     addDefaultResource("core-default.xml");
     addDefaultResource("core-site.xml");
+    // msx
+    try {
+        BufferedReader reader = new BufferedReader(new FileReader("/root/reconf_test_gen/lib/enable"));
+        String buffer = reader.readLine();
+        reader.close();
+        if (buffer.equals("true"))
+            msxConfEnable = true;
+        else
+            msxConfEnable = false;
+    } catch(Exception e) {
+        e.printStackTrace();
+    }
   }
   
   private Properties properties;
@@ -1071,7 +1090,15 @@
     throw new IllegalStateException("Variable substitution depth too large: " 
                                     + MAX_SUBST + " " + expr);
   }
-  
+
+  // msx
+  private void whoInvokesMe(String parameter) {
+      if (msxConfEnable == false)
+          return;
+      System.out.println("msx-conf " + parameter + " conf with hashcode " + this.hashCode());
+      return;
+  }
+
   /**
    * Get the value of the <code>name</code> property, <code>null</code> if
    * no such property exists. If the key is deprecated, it returns the value of
@@ -1084,7 +1111,8 @@
    * @return the value of the <code>name</code> or its replacing property, 
    *         or null if no such property exists.
    */
-  public String get(String name) {
+  public String get(String name) { 
+    whoInvokesMe(name);
     String[] names = handleDeprecation(deprecationContext.get(), name);
     String result = null;
     for(String n : names) {
@@ -1141,7 +1169,8 @@
    * @return the value of the <code>name</code> or its replacing property, 
    *         or null if no such property exists.
    */
-  public String getTrimmed(String name) {
+  public String getTrimmed(String name) { 
+    whoInvokesMe(name);
     String value = get(name);
     
     if (null == value) {
@@ -1161,7 +1190,8 @@
    * @return              the value of the <code>name</code> or defaultValue
    *                      if it is not set.
    */
-  public String getTrimmed(String name, String defaultValue) {
+  public String getTrimmed(String name, String defaultValue) { 
+    whoInvokesMe(name);
     String ret = getTrimmed(name);
     return ret == null ? defaultValue : ret;
   }
@@ -1176,7 +1206,8 @@
    * @return the value of the <code>name</code> property or 
    *         its replacing property and null if no such property exists.
    */
-  public String getRaw(String name) {
+  public String getRaw(String name) { 
+    whoInvokesMe(name);
     String[] names = handleDeprecation(deprecationContext.get(), name);
     String result = null;
     for(String n : names) {
@@ -1343,7 +1374,8 @@
    * @return property value, or <code>defaultValue</code> if the property 
    *         doesn't exist.                    
    */
-  public String get(String name, String defaultValue) {
+  public String get(String name, String defaultValue) { 
+    whoInvokesMe(name);
     String[] names = handleDeprecation(deprecationContext.get(), name);
     String result = null;
     for(String n : names) {
@@ -1365,7 +1397,8 @@
    * @return property value as an <code>int</code>, 
    *         or <code>defaultValue</code>. 
    */
-  public int getInt(String name, int defaultValue) {
+  public int getInt(String name, int defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getTrimmed(name);
     if (valueString == null)
       return defaultValue;
@@ -1386,7 +1419,8 @@
    * @return property value interpreted as an array of comma-delimited
    *         <code>int</code> values
    */
-  public int[] getInts(String name) {
+  public int[] getInts(String name) { 
+    whoInvokesMe(name);
     String[] strings = getTrimmedStrings(name);
     int[] ints = new int[strings.length];
     for (int i = 0; i < strings.length; i++) {
@@ -1418,7 +1452,8 @@
    * @return property value as a <code>long</code>, 
    *         or <code>defaultValue</code>. 
    */
-  public long getLong(String name, long defaultValue) {
+  public long getLong(String name, long defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getTrimmed(name);
     if (valueString == null)
       return defaultValue;
@@ -1443,7 +1478,8 @@
    * @return property value as a <code>long</code>,
    *         or <code>defaultValue</code>.
    */
-  public long getLongBytes(String name, long defaultValue) {
+  public long getLongBytes(String name, long defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getTrimmed(name);
     if (valueString == null)
       return defaultValue;
@@ -1490,7 +1526,8 @@
    * @return property value as a <code>float</code>, 
    *         or <code>defaultValue</code>. 
    */
-  public float getFloat(String name, float defaultValue) {
+  public float getFloat(String name, float defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getTrimmed(name);
     if (valueString == null)
       return defaultValue;
@@ -1519,7 +1556,8 @@
    * @return property value as a <code>double</code>, 
    *         or <code>defaultValue</code>. 
    */
-  public double getDouble(String name, double defaultValue) {
+  public double getDouble(String name, double defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getTrimmed(name);
     if (valueString == null)
       return defaultValue;
@@ -1546,7 +1584,8 @@
    * @return property value as a <code>boolean</code>, 
    *         or <code>defaultValue</code>. 
    */
-  public boolean getBoolean(String name, boolean defaultValue) {
+  public boolean getBoolean(String name, boolean defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getTrimmed(name);
     if (null == valueString || valueString.isEmpty()) {
       return defaultValue;
@@ -1596,7 +1635,8 @@
    * @throws IllegalArgumentException If mapping is illegal for the type
    * provided
    */
-  public <T extends Enum<T>> T getEnum(String name, T defaultValue) {
+  public <T extends Enum<T>> T getEnum(String name, T defaultValue) { 
+    whoInvokesMe(name);
     final String val = getTrimmed(name);
     return null == val
       ? defaultValue
@@ -1674,7 +1714,8 @@
    * @throws NumberFormatException If the property stripped of its unit is not
    *         a number
    */
-  public long getTimeDuration(String name, long defaultValue, TimeUnit unit) {
+  public long getTimeDuration(String name, long defaultValue, TimeUnit unit) { 
+    whoInvokesMe(name);
     String vStr = get(name);
     if (null == vStr) {
       return defaultValue;
@@ -1694,7 +1735,8 @@
     return unit.convert(Long.parseLong(vStr), vUnit.unit());
   }
 
-  public long[] getTimeDurations(String name, TimeUnit unit) {
+  public long[] getTimeDurations(String name, TimeUnit unit) { 
+    whoInvokesMe(name);
     String[] strings = getTrimmedStrings(name);
     long[] durations = new long[strings.length];
     for (int i = 0; i < strings.length; i++) {
@@ -1713,7 +1755,8 @@
    * @param defaultValue default value
    * @return property value as a compiled Pattern, or defaultValue
    */
-  public Pattern getPattern(String name, Pattern defaultValue) {
+  public Pattern getPattern(String name, Pattern defaultValue) { 
+    whoInvokesMe(name);
     String valString = get(name);
     if (null == valString || valString.isEmpty()) {
       return defaultValue;
@@ -1756,7 +1799,8 @@
    * in from.
    */
   @InterfaceStability.Unstable
-  public synchronized String[] getPropertySources(String name) {
+  public synchronized String[] getPropertySources(String name) { 
+    whoInvokesMe(name);
     if (properties == null) {
       // If properties is null, it means a resource was newly added
       // but the props were cleared so as to load it upon future
@@ -1930,7 +1974,8 @@
    * @param defaultValue the default value if it is not set
    * @return a new set of ranges from the configured value
    */
-  public IntegerRanges getRange(String name, String defaultValue) {
+  public IntegerRanges getRange(String name, String defaultValue) { 
+    whoInvokesMe(name);
     return new IntegerRanges(get(name, defaultValue));
   }
 
@@ -1944,10 +1989,11 @@
    * @param name property name.
    * @return property value as a collection of <code>String</code>s. 
    */
-  public Collection<String> getStringCollection(String name) {
+  public Collection<String> getStringCollection(String name) { 
+    whoInvokesMe(name);
     String valueString = get(name);
     return StringUtils.getStringCollection(valueString);
-  }
+  } 
 
   /** 
    * Get the comma delimited values of the <code>name</code> property as 
@@ -1958,7 +2004,8 @@
    * @return property value as an array of <code>String</code>s, 
    *         or <code>null</code>. 
    */
-  public String[] getStrings(String name) {
+  public String[] getStrings(String name) { 
+    whoInvokesMe(name);
     String valueString = get(name);
     return StringUtils.getStrings(valueString);
   }
@@ -1973,7 +2020,8 @@
    * @return property value as an array of <code>String</code>s, 
    *         or default value. 
    */
-  public String[] getStrings(String name, String... defaultValue) {
+  public String[] getStrings(String name, String... defaultValue) { 
+    whoInvokesMe(name);
     String valueString = get(name);
     if (valueString == null) {
       return defaultValue;
@@ -1990,7 +2038,8 @@
    * @param name property name.
    * @return property value as a collection of <code>String</code>s, or empty <code>Collection</code> 
    */
-  public Collection<String> getTrimmedStringCollection(String name) {
+  public Collection<String> getTrimmedStringCollection(String name) { 
+    whoInvokesMe(name);
     String valueString = get(name);
     if (null == valueString) {
       Collection<String> empty = new ArrayList<String>();
@@ -2008,7 +2057,8 @@
    * @return property value as an array of trimmed <code>String</code>s, 
    *         or empty array. 
    */
-  public String[] getTrimmedStrings(String name) {
+  public String[] getTrimmedStrings(String name) { 
+    whoInvokesMe(name);
     String valueString = get(name);
     return StringUtils.getTrimmedStrings(valueString);
   }
@@ -2023,7 +2073,8 @@
    * @return property value as an array of trimmed <code>String</code>s, 
    *         or default value. 
    */
-  public String[] getTrimmedStrings(String name, String... defaultValue) {
+  public String[] getTrimmedStrings(String name, String... defaultValue) { 
+    whoInvokesMe(name);
     String valueString = get(name);
     if (null == valueString) {
       return defaultValue;
@@ -2051,7 +2102,8 @@
    * @param name property name
    * @return password
    */
-  public char[] getPassword(String name) throws IOException {
+  public char[] getPassword(String name) throws IOException { 
+    whoInvokesMe(name);
     char[] pass = null;
 
     pass = getPasswordFromCredentialProviders(name);
@@ -2112,7 +2164,8 @@
    * @throws IOException
    */
   public char[] getPasswordFromCredentialProviders(String name)
-      throws IOException {
+      throws IOException { 
+    whoInvokesMe(name);
     char[] pass = null;
     try {
       List<CredentialProvider> providers =
@@ -2267,7 +2320,8 @@
    * @return the class object.
    * @throws ClassNotFoundException if the class is not found.
    */
-  public Class<?> getClassByName(String name) throws ClassNotFoundException {
+  public Class<?> getClassByName(String name) throws ClassNotFoundException { 
+    whoInvokesMe(name);
     Class<?> ret = getClassByNameOrNull(name);
     if (ret == null) {
       throw new ClassNotFoundException("Class " + name + " not found");
@@ -2283,7 +2337,8 @@
    * @param name the class name
    * @return the class object, or null if it could not be found.
    */
-  public Class<?> getClassByNameOrNull(String name) {
+  public Class<?> getClassByNameOrNull(String name) { 
+    whoInvokesMe(name);
     Map<String, WeakReference<Class<?>>> map;
     
     synchronized (CACHE_CLASSES) {
@@ -2332,7 +2387,8 @@
    * @return property value as a <code>Class[]</code>, 
    *         or <code>defaultValue</code>. 
    */
-  public Class<?>[] getClasses(String name, Class<?> ... defaultValue) {
+  public Class<?>[] getClasses(String name, Class<?> ... defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getRaw(name);
     if (null == valueString) {
       return defaultValue;
@@ -2359,7 +2415,8 @@
    * @return property value as a <code>Class</code>, 
    *         or <code>defaultValue</code>. 
    */
-  public Class<?> getClass(String name, Class<?> defaultValue) {
+  public Class<?> getClass(String name, Class<?> defaultValue) { 
+    whoInvokesMe(name);
     String valueString = getTrimmed(name);
     if (valueString == null)
       return defaultValue;
@@ -2388,7 +2445,8 @@
    */
   public <U> Class<? extends U> getClass(String name, 
                                          Class<? extends U> defaultValue, 
-                                         Class<U> xface) {
+                                         Class<U> xface) { 
+    whoInvokesMe(name);
     try {
       Class<?> theClass = getClass(name, defaultValue);
       if (theClass != null && !xface.isAssignableFrom(theClass))
@@ -2415,7 +2473,8 @@
    * @return a <code>List</code> of objects implementing <code>xface</code>.
    */
   @SuppressWarnings("unchecked")
-  public <U> List<U> getInstances(String name, Class<U> xface) {
+  public <U> List<U> getInstances(String name, Class<U> xface) { 
+    whoInvokesMe(name);
     List<U> ret = new ArrayList<U>();
     Class<?>[] classes = getClasses(name);
     for (Class<?> cl: classes) {
@@ -2507,7 +2566,8 @@
    * @param name resource name.
    * @return the url for the named resource.
    */
-  public URL getResource(String name) {
+  public URL getResource(String name) { 
+    whoInvokesMe(name);
     return classLoader.getResource(name);
   }
   
@@ -2518,7 +2578,8 @@
    * @param name configuration resource name.
    * @return an input stream attached to the resource.
    */
-  public InputStream getConfResourceAsInputStream(String name) {
+  public InputStream getConfResourceAsInputStream(String name) { 
+    whoInvokesMe(name);
     try {
       URL url= getResource(name);
 
@@ -2542,7 +2603,8 @@
    * @param name configuration resource name.
    * @return a reader attached to the resource.
    */
-  public Reader getConfResourceAsReader(String name) {
+  public Reader getConfResourceAsReader(String name) { 
+    whoInvokesMe(name);
     try {
       URL url= getResource(name);
 
diff -ruN /hadoop-2.8.5-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java
--- /hadoop-2.8.5-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java	1970-01-01 00:00:00.000000000 +0000
+++ ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ReconfAgent.java	2020-05-18 03:42:48.187070648 +0000
@@ -0,0 +1,182 @@
+package org.apache.hadoop.conf;
+
+import java.io.*;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import org.apache.hadoop.conf.Configuration;
+
+public class ReconfAgent {
+
+    private static final int RP_MODE_INSTANCE = -1; // set v2 to a single instance of the specified component throughout a test
+    private static final int RP_MODE_COMPONENT = -2; // set v2 to all instances for the specified component
+    //private static final String RP_MODE_RECONF = "1"; // set v2 to a single life cycle of a single instance of the specified component
+    private static final String reconf_systemRootDir = "/root/parameter_test_controller/";
+
+    private static String reconf_vvmode = "";
+    private static String reconf_parameter = "";
+    private static String reconf_component = "";
+    private static String reconf_v1 = "";
+    private static String reconf_v2 = "";
+    private static String reconf_point = "";
+    private static int reconf_point_int = 0; 
+    
+    private static int reconf_init_point_index = 0;
+    private static Map<Integer, String> confHcComponentMap = new HashMap<Integer, String>();
+
+    // load just once
+    static {
+	loadSharedVariables();
+    }
+
+    private static void loadSharedVariables() {
+        try {
+            BufferedReader reader;
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_vvmode")));
+            reconf_vvmode = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_parameter")));
+            reconf_parameter = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_component")));
+            reconf_component = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_v1")));
+            reconf_v1 = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_v2")));
+            reconf_v2 = reader.readLine();
+            reader.close();
+
+            reader = new BufferedReader(new FileReader(new File(reconf_systemRootDir + "shared/reconf_point")));
+            reconf_point = reader.readLine();
+            reader.close();
+            reconf_point_int = Integer.valueOf(reconf_point);
+
+            if (!reconf_vvmode.equals("v1v1") && !reconf_vvmode.equals("v2v2") && !reconf_vvmode.equals("v1v2") && !reconf_vvmode.equals("none")) {
+                myPrint("ERROR : wrong value of reconf_vvmode " + reconf_vvmode);
+                System.exit(1);
+            }
+      
+	    myPrint("reconf_vvmode=" + reconf_vvmode + ", reconf_parameter=" + reconf_parameter + 
+			    ", reconf_component=" + reconf_component + ", reconf_v1=" + reconf_v1 + ", reconf_v2=" + reconf_v2 +
+			    ", reconf_point=" + reconf_point);
+        } catch (Exception e) {
+            myPrint("ERROR : loadSharedVariables");
+            e.printStackTrace();
+        }
+    }
+
+    public ReconfAgent(String callerClassName) {
+ 	myPrint("creating ReconfAgent " + this.hashCode() + " for " + callerClassName);
+    }
+
+    public void checkReconfAtShutdown(Object obj, String component, Configuration myConf) {
+	if (obj == null || myConf == null)
+	    return;
+        myPrint("" + component + " stop " + obj.hashCode() + ", value is " + myConf.get(reconf_parameter));
+	Integer confToRemove = new Integer(myConf.hashCode());
+	String v = confHcComponentMap.remove(confToRemove);
+	if (v == null) {
+	    myPrint("WARN : conf " + confToRemove + " not existed in confInstanceList when removing.");
+	}
+    }
+
+    public void performReconf(Object obj, String component, Configuration myConf) {
+      Integer confToAdd = new Integer(myConf.hashCode());
+      if (!confHcComponentMap.containsKey(confToAdd)) {
+	  confHcComponentMap.put(confToAdd, component);
+	  myPrint("conf with hashCode " + confToAdd + " for " + component);
+      } else {
+	  myPrint("WARN : conf " + confToAdd + " existed in confInstanceList when adding.");
+	  Configuration copiedConf = new Configuration(myConf);
+	  myConf = copiedConf;
+	  confToAdd = new Integer(myConf.hashCode());
+	  if (!confHcComponentMap.containsKey(confToAdd)) {
+	      confHcComponentMap.put(confToAdd, component);
+	      myPrint("conf with hashCode " + confToAdd + " for " + component);
+	      myPrint("issue is fixed with copies configuration.");
+	  } else {
+	      myPrint("ERROR : conf " + confToAdd + " existed in confInstanceList when adding.");
+	  }
+      }
+
+      if (reconf_vvmode.equals("none")) {
+          myPrint(component + " init, vvmode is none, do nothing");
+      }
+
+      if (reconf_vvmode.equals("v1v1")) {
+          myConf.set(reconf_parameter, reconf_v1);
+          myPrint(component + " init " + obj.hashCode() + ", vvmode is " + reconf_vvmode + 
+			  ". Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode());
+      }
+
+      if ((reconf_vvmode.equals("v2v2"))) {
+          myConf.set(reconf_parameter, reconf_v2);
+          myPrint(component + " init " + obj.hashCode() + ", vvmode is " + reconf_vvmode + 
+			  ". Set value as v2 " + reconf_v2);//  + " myConf is " + myConf.hashCode());
+      }
+
+      if (reconf_vvmode.equals("v1v2")) { // reconfiguration injection
+          try {
+              synchronized(this) {
+                  if (reconf_component.equals(component)) {
+                      if (reconf_point_int == RP_MODE_INSTANCE) {
+                          /*if (reconf_instanceWithV2Alive == false) {
+                                reconf_instanceWithV2Alive = true;
+                                reconf_instanceWithV2HC = this.hashCode();
+                                myConf.set(reconf_parameter, reconf_v2);
+                                myPrint("" + component + " init, perform Instance-Wide v1v2 reconf " + reconf_point +  " for " + component + ". " +
+                                    "Assign " + reconf_parameter + " as v2 value " + reconf_v2);
+                                myPrint("switch instanceWithV2Alive to true and record instanceWithV2HC as " + reconf_instanceWithV2HC);
+                            } else { // the instance configured with v2 is still alive
+                                myConf.set(reconf_parameter, reconf_v1);
+                                myPrint("" + component + " init, the instance configured with v2 is still alive. " +
+                                    "Assign " + reconf_parameter + " as v1 value " + reconf_v1);
+                            }*/
+                      } else {
+                          reconf_init_point_index ++;
+                          if (reconf_point_int == reconf_init_point_index) {
+                              myConf.set(reconf_parameter, reconf_v2);
+                              myPrint(component + " init " + obj.hashCode() + ", PERFORM V1V2 RECONF " + reconf_point +
+					      ". Set value as v2 " + reconf_v2);// + " myConf is " + myConf.hashCode());
+                          } else {
+                              myConf.set(reconf_parameter, reconf_v1);
+                              myPrint(component + " init " + obj.hashCode() + ", irrelevant init point " + reconf_init_point_index  +
+					      " not " + reconf_point +
+					      ". Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode());
+                          }
+                      }
+                  } else { // for other component instances, just configure it to be v1
+                      myConf.set(reconf_parameter, reconf_v1);
+                      myPrint(component + " init " + obj.hashCode() + ", irrelevant component." +
+				      " Set value as v1 " + reconf_v1);// + " myConf is " + myConf.hashCode()); 
+                  }
+              }
+          } catch (Exception e) {
+              myPrint("ERROR happened during performReconf");
+              System.exit(1);
+          }
+      }
+    }
+
+    private static void myPrint(String str) { System.out.println("msx-reconfagent " + str);}
+    
+    /*public ReconfAgent() {
+	String callerClassName = new Exception().getStackTrace()[1].getClassName();
+ 	myPrint("creating ReconfAgent " + this.hashCode() + " for " + callerClassName);
+    }*/
+    
+    /*public void checkReconfAtShutdown(Object obj, Configuration myConf) {
+	this.checkReconfAtShutdown(obj, obj.getClass().getSimpleName(), myConf);
+    }*/
+
+    /*public void performReconf(Object obj, Configuration myConf) {
+	this.performReconf(obj, obj.getClass().getSimpleName(), myConf);
+    }*/
+}
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2020-04-28 23:04:09.000000000 +0000
@@ -56,6 +56,9 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**
  * The JournalNode is a daemon which allows namenodes using
  * the QuorumJournalManager to log and retrieve edits stored
@@ -104,8 +107,14 @@
     return getOrCreateJournal(jid, StartupOption.REGULAR);
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("JournalNode");
+
   @Override
   public void setConf(Configuration conf) {
+    // msx
+    reconfAgent.performReconf(this, "JournalNode", conf);
+
     this.conf = conf;
     this.localDir = new File(
         conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,
@@ -191,6 +200,9 @@
    * should indicate an error)
    */
   public void stop(int rc) {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "JournalNode", this.conf);
+
     this.resultCode = rc;
     
     if (rpcServer != null) { 
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2020-04-28 23:04:09.000000000 +0000
@@ -222,6 +222,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * DataNode is a class (and program) that stores a set of
  * blocks for a DFS deployment.  A single deployment can
@@ -394,6 +397,9 @@
 
   private ScheduledThreadPoolExecutor metricsLoggerTimer;
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("DataNode");
+
   /**
    * Creates a dummy DataNode for testing purpose.
    */
@@ -401,6 +407,10 @@
   @InterfaceAudience.LimitedPrivate("HDFS")
   DataNode(final Configuration conf) {
     super(conf);
+
+    // msx
+    reconfAgent.performReconf(this, "DataNode", conf);
+
     this.blockScanner = new BlockScanner(this, conf);
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
@@ -425,6 +435,10 @@
            final List<StorageLocation> dataDirs,
            final SecureResources resources) throws IOException {
     super(conf);
+
+    // msx
+    reconfAgent.performReconf(this, "DataNode", conf);
+    
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
         new TracerConfigurationManager(DATANODE_HTRACE_PREFIX, conf);
@@ -1852,6 +1866,9 @@
    * Otherwise, deadlock might occur.
    */
   public void shutdown() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "DataNode", this.getConf());
+
     stopMetricsLogger();
     if (plugins != null) {
       for (ServicePlugin p : plugins) {
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2020-04-28 23:04:09.000000000 +0000
@@ -147,6 +147,9 @@
 import static org.apache.hadoop.util.ExitUtil.terminate;
 import static org.apache.hadoop.util.ToolRunner.confirmPrompt;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * NameNode serves as both directory namespace manager and
  * "inode table" for the Hadoop DFS.  There is a single NameNode
@@ -885,8 +888,14 @@
     this(conf, NamenodeRole.NAMENODE);
   }
 
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("NameNode");
+
   protected NameNode(Configuration conf, NamenodeRole role)
       throws IOException {
+    // msx
+    reconfAgent.performReconf(this, "NameNode", conf);
+
     this.tracer = new Tracer.Builder("NameNode").
         conf(TraceUtils.wrapHadoopConf(NAMENODE_HTRACE_PREFIX, conf)).
         build();
@@ -959,6 +968,9 @@
    * Stop all NameNode threads and wait for all to finish.
    */
   public void stop() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "NameNode", this.conf);
+
     synchronized(this) {
       if (stopRequested)
         return;
diff -ruN /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java
--- /hadoop-2.8.5-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2018-05-05 10:34:35.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2020-04-28 23:04:09.000000000 +0000
@@ -83,6 +83,9 @@
 
 import javax.management.ObjectName;
 
+// msx
+import org.apache.hadoop.conf.ReconfAgent;
+
 /**********************************************************
  * The Secondary NameNode is a helper to the primary NameNode.
  * The Secondary is responsible for supporting periodic checkpoints 
@@ -180,9 +183,15 @@
   public SecondaryNameNode(Configuration conf)  throws IOException {
     this(conf, new CommandLineOpts());
   }
+
+  // msx
+  private static ReconfAgent reconfAgent = new ReconfAgent("SecondaryNameNode");
   
   public SecondaryNameNode(Configuration conf,
       CommandLineOpts commandLineOpts) throws IOException {
+    // msx 
+    reconfAgent.performReconf(this, "SecondaryNameNode", conf);
+
     try {
       String nsId = DFSUtil.getSecondaryNameServiceId(conf);
       if (HAUtil.isHAEnabled(conf, nsId)) {
@@ -280,6 +289,9 @@
    * Returns only after shutdown is complete.
    */
   public void shutdown() {
+    // msx
+    reconfAgent.checkReconfAtShutdown(this, "SecondaryNameNode", this.conf);
+
     shouldRun = false;
     if (checkpointThread != null) {
       checkpointThread.interrupt();
