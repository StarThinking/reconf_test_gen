diff -ruN /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java
--- /hadoop-3.2.1-src/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/AbstractService.java	2020-04-10 05:15:01.000000000 +0000
@@ -149,7 +149,7 @@
    * the state change not permitted, or something else went wrong
    */
   @Override
-  public void init(Configuration conf) {
+  public void init(Configuration conf) { 
     if (conf == null) {
       throw new ServiceStateException("Cannot initialize service "
                                       + getName() + ": null configuration");
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java	2020-04-10 14:31:59.655910290 +0000
@@ -149,6 +149,7 @@
 
   @Override
   public void setConf(Configuration conf) {
+    LOG.info("msx-hdfs JournalNode init");
     this.conf = conf;
 
     String journalNodeDir = null;
@@ -210,6 +211,7 @@
    * Start listening for edits via RPC.
    */
   public void start() throws IOException {
+    LOG.info("msx-hdfs JournalNode start");
     Preconditions.checkState(!isStarted(), "JN already running");
 
     try {
@@ -266,6 +268,7 @@
    * should indicate an error)
    */
   public void stop(int rc) {
+    LOG.info("msx-hdfs JournalNode stop");
     this.resultCode = rc;
 
     for (JournalNodeSyncer jSyncer : journalSyncersById.values()) {
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java	2020-04-10 14:28:25.968787510 +0000
@@ -419,6 +419,7 @@
   @InterfaceAudience.LimitedPrivate("HDFS")
   DataNode(final Configuration conf) throws DiskErrorException {
     super(conf);
+    LOG.info("msx-hdfs DataNode init");
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
         new TracerConfigurationManager(DATANODE_HTRACE_PREFIX, conf);
@@ -446,6 +447,7 @@
            final StorageLocationChecker storageLocationChecker,
            final SecureResources resources) throws IOException {
     super(conf);
+    LOG.info("msx-hdfs DataNode init");
     this.tracer = createTracer(conf);
     this.tracerConfigurationManager =
         new TracerConfigurationManager(DATANODE_HTRACE_PREFIX, conf);
@@ -2005,6 +2007,7 @@
    * Otherwise, deadlock might occur.
    */
   public void shutdown() {
+    LOG.info("msx-hdfs DataNode stop");
     stopMetricsLogger();
     if (plugins != null) {
       for (ServicePlugin p : plugins) {
@@ -2656,6 +2659,7 @@
    *  If this thread is specifically interrupted, it will stop waiting.
    */
   public void runDatanodeDaemon() throws IOException {
+    LOG.info("msx-hdfs DataNode start");
     blockPoolManager.startAll();
 
     // start dataXceiveServer
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java	2020-04-10 14:24:43.153531333 +0000
@@ -929,6 +929,7 @@
   protected NameNode(Configuration conf, NamenodeRole role)
       throws IOException {
     super(conf);
+    LOG.info("msx-hdfs NameNode init");
     this.tracer = new Tracer.Builder("NameNode").
         conf(TraceUtils.wrapHadoopConf(NAMENODE_HTRACE_PREFIX, conf)).
         build();
@@ -965,6 +966,7 @@
       this.stopAtException(e);
       throw e;
     }
+    LOG.info("msx-hdfs NameNode start");
     this.started.set(true);
   }
 
@@ -1008,6 +1010,7 @@
    * Stop all NameNode threads and wait for all to finish.
    */
   public void stop() {
+    LOG.info("msx-hdfs NameNode stop");
     synchronized(this) {
       if (stopRequested)
         return;
diff -ruN /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java
--- /hadoop-3.2.1-src/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2019-09-10 14:35:49.000000000 +0000
+++ ./hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java	2020-04-10 14:34:36.034195571 +0000
@@ -183,6 +183,7 @@
   
   public SecondaryNameNode(Configuration conf,
       CommandLineOpts commandLineOpts) throws IOException {
+    LOG.info("msx-hdfs SecondaryNameNode init");
     try {
       String nsId = DFSUtil.getSecondaryNameServiceId(conf);
       if (HAUtil.isHAEnabled(conf, nsId)) {
@@ -280,6 +281,7 @@
    * Returns only after shutdown is complete.
    */
   public void shutdown() {
+    LOG.info("msx-hdfs SecondaryNameNode stop");
     shouldRun = false;
     if (checkpointThread != null) {
       checkpointThread.interrupt();
@@ -318,6 +320,7 @@
 
   @Override
   public void run() {
+    LOG.info("msx-hdfs SecondaryNameNode start");
     SecurityUtil.doAsLoginUserOrFatal(
         new PrivilegedAction<Object>() {
         @Override
diff -ruN /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java
--- /hadoop-3.2.1-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java	2019-09-10 14:35:50.000000000 +0000
+++ ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java	2020-04-10 05:24:32.000000000 +0000
@@ -496,10 +496,12 @@
         throws Exception {
       initResourceManager(index, conf);
       super.serviceInit(conf);
+      LOG.info("msx-yarn ResourceManager init");
     }
 
     @Override
     protected synchronized void serviceStart() throws Exception {
+      LOG.info("msx-yarn ResourceManager start");
       startResourceManager(index);
       if(index == 0 && resourceManagers[index].getRMContext().isHAEnabled()) {
         resourceManagers[index].getRMContext().getRMAdminService()
@@ -529,6 +531,7 @@
     
     @Override
     protected synchronized void serviceStop() throws Exception {
+      LOG.info("msx-yarn ResourceManager stop");
       if (resourceManagers[index] != null) {
         waitForAppMastersToFinish(5000);
         resourceManagers[index].stop();
@@ -599,6 +602,7 @@
       LOG.info("Starting NM: " + index);
       nodeManagers[index].init(config);
       super.serviceInit(config);
+      LOG.info("msx-yarn NodeManager init");
     }
 
     /**
@@ -622,6 +626,7 @@
     }
 
     protected synchronized void serviceStart() throws Exception {
+      LOG.info("msx-yarn NodeManager start");
       nodeManagers[index].start();
       if (nodeManagers[index].getServiceState() != STATE.STARTED) {
         // NM could have failed.
@@ -632,6 +637,7 @@
 
     @Override
     protected synchronized void serviceStop() throws Exception {
+      LOG.info("msx-yarn NodeManager stop");
       if (nodeManagers[index] != null) {
         nodeManagers[index].stop();
       }
@@ -820,10 +826,12 @@
           MemoryTimelineStateStore.class, TimelineStateStore.class);
       appHistoryServer.init(conf);
       super.serviceInit(conf);
+      LOG.info("msx-yarn ApplicationHistoryServer init");
     }
 
     @Override
     protected synchronized void serviceStart() throws Exception {
+      LOG.info("msx-yarn ApplicationHistoryServer start");
       appHistoryServer.start();
       if (appHistoryServer.getServiceState() != STATE.STARTED) {
         // AHS could have failed.
@@ -842,6 +850,7 @@
 
     @Override
     protected synchronized void serviceStop() throws Exception {
+      LOG.info("msx-yarn ApplicationHistoryServer stop");
       if (appHistoryServer != null) {
         appHistoryServer.stop();
       }
